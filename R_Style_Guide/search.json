[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Wissen macht R!",
    "section": "",
    "text": "Intro\nDieser Style Guide umfasst Empfehlungen, die die Arbeit mit R etwas vereinheitlichen soll, wo es sinnvoll erscheint, damit in der Lehre und in Projekten gut zusammengearbeitet werden kann und nicht alles immer zu fremd aussieht.\nTwo R packages support this style guide:\n\nstyler allows you to interactively restyle selected text, files, or entire projects. It includes an RStudio add-in, the easiest way to re-style existing code.\n\n\n\n\n\n\n\n\n\nlintr performs automated checks to confirm that you conform to the style guide."
  },
  {
    "objectID": "files.html#names",
    "href": "files.html#names",
    "title": "1  Files",
    "section": "1.1 Names",
    "text": "1.1 Names\nFile names should be meaningful and end in .R. Avoid using special characters in file names - stick with numbers, letters, -, and _.\n# Good\nfit_models.R\nutility_functions.R\n\n# Bad\nfit models.R\nfoo.r\nstuff.r\nIf files should be run in a particular order, prefix them with numbers. If it seems likely you’ll have more than 10 files, left pad with zero:\n00_download.R\n01_explore.R\n...\n09_model.R\n10_visualize.R\nIf you later realise that you’ve missed some steps, it’s tempting to use 02a, 02b, etc. However, I think it’s generally better to bite the bullet and rename all files.\nPay attention to capitalization, since you, or some of your collaborators, might be using an operating system with a case-insensitive file system (e.g., Microsoft Windows or OS X) which can lead to problems with (case-sensitive) revision control systems. Prefer file names that are all lower case, and never have names that differ only in their capitalization."
  },
  {
    "objectID": "files.html#organisation",
    "href": "files.html#organisation",
    "title": "1  Dateien",
    "section": "1.2 Organisation",
    "text": "1.2 Organisation\nIt’s hard to describe exactly how you should organise your code across multiple files. I think the best rule of thumb is that if you can give a file a concise name that still evokes its contents, you’ve arrived at a good organisation. But getting to that point is hard."
  },
  {
    "objectID": "files.html#internal-structure",
    "href": "files.html#internal-structure",
    "title": "1  Dateien",
    "section": "1.3 Internal structure",
    "text": "1.3 Internal structure\nUse commented lines of - and = to break up your file into easily readable chunks.\n\n# Load data ---------------------------\n\n# Plot data ---------------------------\n\nIf your script uses add-on packages, load them all at once at the very beginning of the file. This is more transparent than sprinkling library() calls throughout your code or having hidden dependencies that are loaded in a startup file, such as .Rprofile."
  },
  {
    "objectID": "syntax.html#object-names",
    "href": "syntax.html#object-names",
    "title": "2  Syntax",
    "section": "2.1 Object names",
    "text": "2.1 Object names\n\n“There are only two hard things in Computer Science: cache invalidation and naming things.”\n— Phil Karlton\n\nVariable and function names should use only lowercase letters, numbers, and _. Use underscores (_) (so called snake case) to separate words within a name.\n\n# Good\nday_one\nday_1\n\n# Bad\nDayOne\ndayone\n\nBase R uses dots in function names (contrib.url()) and class names (data.frame), but it’s better to reserve dots exclusively for the S3 object system. In S3, methods are given the name function.class; if you also use . in function and class names, you end up with confusing methods like as.data.frame.data.frame().\nIf you find yourself attempting to cram data into variable names (e.g. model_2018, model_2019, model_2020), consider using a list or data frame instead.\nGenerally, variable names should be nouns and function names should be verbs. Strive for names that are concise and meaningful (this is not easy!).\n\n# Good\nday_one\n\n# Bad\nfirst_day_of_the_month\ndjm1\n\nWhere possible, avoid re-using names of common functions and variables. This will cause confusion for the readers of your code.\n\n# Bad\nT <- FALSE\nc <- 10\nmean <- function(x) sum(x)"
  },
  {
    "objectID": "syntax.html#spacing",
    "href": "syntax.html#spacing",
    "title": "2  Syntax",
    "section": "2.2 Spacing",
    "text": "2.2 Spacing\n\n2.2.1 Commas\nAlways put a space after a comma, never before, just like in regular English.\n\n# Good\nx[, 1]\n\n# Bad\nx[,1]\nx[ ,1]\nx[ , 1]\n\n\n\n2.2.2 Parentheses\nDo not put spaces inside or outside parentheses for regular function calls.\n\n# Good\nmean(x, na.rm = TRUE)\n\n# Bad\nmean (x, na.rm = TRUE)\nmean( x, na.rm = TRUE )\n\nPlace a space before and after () when used with if, for, or while.\n\n# Good\nif (debug) {\n  show(x)\n}\n\n# Bad\nif(debug){\n  show(x)\n}\n\nPlace a space after () used for function arguments:\n\n# Good\nfunction(x) {}\n\n# Bad\nfunction (x) {}\nfunction(x){}\n\n\n\n2.2.3 Embracing\nThe embracing operator, {{ }}, should always have inner spaces to help emphasise its special behaviour:\n\n# Good\nmax_by <- function(data, var, by) {\n  data %>%\n    group_by({{ by }}) %>%\n    summarise(maximum = max({{ var }}, na.rm = TRUE))\n}\n\n# Bad\nmax_by <- function(data, var, by) {\n  data %>%\n    group_by({{by}}) %>%\n    summarise(maximum = max({{var}}, na.rm = TRUE))\n}\n\n\n\n2.2.4 Infix operators\nMost infix operators (==, +, -, <-, etc.) should always be surrounded by spaces:\n\n# Good\nheight <- (feet * 12) + inches\nmean(x, na.rm = TRUE)\n\n# Bad\nheight<-feet*12+inches\nmean(x, na.rm=TRUE)\n\nThere are a few exceptions, which should never be surrounded by spaces:\n\nThe operators with high precedence: ::, :::, $, @, [, [[, ^, unary -, unary +, and :.\n\n# Good\nsqrt(x^2 + y^2)\ndf$z\nx <- 1:10\n\n# Bad\nsqrt(x ^ 2 + y ^ 2)\ndf $ z\nx <- 1 : 10\n\nSingle-sided formulas when the right-hand side is a single identifier:\n\n# Good\n~foo\ntribble(\n  ~col1, ~col2,\n  \"a\",   \"b\"\n)\n\n# Bad\n~ foo\ntribble(\n  ~ col1, ~ col2,\n  \"a\", \"b\"\n)\n\nNote that single-sided formulas with a complex right-hand side do need a space:\n\n# Good\n~ .x + .y\n\n# Bad\n~.x + .y\n\nWhen used in tidy evaluation !! (bang-bang) and !!! (bang-bang-bang) (because have precedence equivalent to unary -/+)\n\n# Good\ncall(!!xyz)\n\n# Bad\ncall(!! xyz)\ncall( !! xyz)\ncall(! !xyz)\n\nThe help operator\n\n# Good\npackage?stats\n?mean\n\n# Bad\npackage ? stats\n? mean\n\n\n\n\n2.2.5 Extra spaces\nAdding extra spaces is ok if it improves alignment of = or <-.\n\n# Good\nlist(\n  total = a + b + c,\n  mean  = (a + b + c) / n\n)\n\n# Also fine\nlist(\n  total = a + b + c,\n  mean = (a + b + c) / n\n)\n\nDo not add extra spaces to places where space is not usually allowed."
  },
  {
    "objectID": "syntax.html#function-calls",
    "href": "syntax.html#function-calls",
    "title": "2  Syntax",
    "section": "2.3 Function calls",
    "text": "2.3 Function calls\n\n2.3.1 Named arguments\nA function’s arguments typically fall into two broad categories: one supplies the data to compute on; the other controls the details of computation. When you call a function, you typically omit the names of data arguments, because they are used so commonly. If you override the default value of an argument, use the full name:\n\n# Good\nmean(1:10, na.rm = TRUE)\n\n# Bad\nmean(x = 1:10, , FALSE)\nmean(, TRUE, x = c(1:10, NA))\n\nAvoid partial matching.\n\n\n2.3.2 Assignment\nAvoid assignment in function calls:\n\n# Good\nx <- complicated_function()\nif (nzchar(x) < 1) {\n  # do something\n}\n\n# Bad\nif (nzchar(x <- complicated_function()) < 1) {\n  # do something\n}\n\nThe only exception is in functions that capture side-effects:\n\noutput <- capture.output(x <- f())"
  },
  {
    "objectID": "syntax.html#control-flow",
    "href": "syntax.html#control-flow",
    "title": "2  Syntax",
    "section": "2.4 Control flow",
    "text": "2.4 Control flow\n\n2.4.1 Code blocks\nCurly braces, {}, define the most important hierarchy of R code. To make this hierarchy easy to see:\n\n{ should be the last character on the line. Related code (e.g., an if clause, a function declaration, a trailing comma, …) must be on the same line as the opening brace.\nThe contents should be indented by two spaces.\n} should be the first character on the line.\n\n\n# Good\nif (y < 0 && debug) {\n  message(\"y is negative\")\n}\n\nif (y == 0) {\n  if (x > 0) {\n    log(x)\n  } else {\n    message(\"x is negative or zero\")\n  }\n} else {\n  y^x\n}\n\ntest_that(\"call1 returns an ordered factor\", {\n  expect_s3_class(call1(x, y), c(\"factor\", \"ordered\"))\n})\n\ntryCatch(\n  {\n    x <- scan()\n    cat(\"Total: \", sum(x), \"\\n\", sep = \"\")\n  },\n  interrupt = function(e) {\n    message(\"Aborted by user\")\n  }\n)\n\n# Bad\nif (y < 0 && debug) {\nmessage(\"Y is negative\")\n}\n\nif (y == 0)\n{\n    if (x > 0) {\n      log(x)\n    } else {\n  message(\"x is negative or zero\")\n    }\n} else { y ^ x }\n\n\n\n2.4.2 If statements\n\nIf used, else should be on the same line as }.\n& and | should never be used inside of an if clause because they can return vectors. Always use && and || instead.\nNB: ifelse(x, a, b) is not a drop-in replacement for if (x) a else b. ifelse() is vectorised (i.e. if length(x) > 1, then a and b will be recycled to match) and it is eager (i.e. both a and b will always be evaluated).\nIf you want to rewrite a simple but lengthy if block:\n::: {.cell}\nif (x > 10) {\n  message <- \"big\"\n} else {\n  message <- \"small\"\n}\n:::\nJust write it all on one line:\n::: {.cell}\nmessage <- if (x > 10) \"big\" else \"small\"\n:::\n\n\n\n2.4.3 Inline statements\nIt’s ok to drop the curly braces for very simple statements that fit on one line, as long as they don’t have side-effects.\n\n# Good\ny <- 10\nx <- if (y < 20) \"Too low\" else \"Too high\"\n\nFunction calls that affect control flow (like return(), stop() or continue) should always go in their own {} block:\n\n# Good\nif (y < 0) {\n  stop(\"Y is negative\")\n}\n\nfind_abs <- function(x) {\n  if (x > 0) {\n    return(x)\n  }\n  x * -1\n}\n\n# Bad\nif (y < 0) stop(\"Y is negative\")\n\nif (y < 0)\n  stop(\"Y is negative\")\n\nfind_abs <- function(x) {\n  if (x > 0) return(x)\n  x * -1\n}\n\n\n\n2.4.4 Implicit type coercion\nAvoid implicit type coercion (e.g. from numeric to logical) in if statements:\n\n# Good\nif (length(x) > 0) {\n  # do something\n}\n\n# Bad\nif (length(x)) {\n  # do something\n}\n\n\n\n2.4.5 Switch statements\n\nAvoid position-based switch() statements (i.e. prefer names).\nEach element should go on its own line.\nElements that fall through to the following element should have a space after =.\nProvide a fall-through error, unless you have previously validated the input.\n\n\n# Good \nswitch(x, \n  a = ,\n  b = 1, \n  c = 2,\n  stop(\"Unknown `x`\", call. = FALSE)\n)\n\n# Bad\nswitch(x, a = , b = 1, c = 2)\nswitch(x, a =, b = 1, c = 2)\nswitch(y, 1, 2, 3)"
  },
  {
    "objectID": "syntax.html#long-lines",
    "href": "syntax.html#long-lines",
    "title": "2  Syntax",
    "section": "2.5 Long lines",
    "text": "2.5 Long lines\nStrive to limit your code to 80 characters per line. This fits comfortably on a printed page with a reasonably sized font. If you find yourself running out of room, this is a good indication that you should encapsulate some of the work in a separate function.\nIf a function call is too long to fit on a single line, use one line each for the function name, each argument, and the closing ). This makes the code easier to read and to change later.\n\n# Good\ndo_something_very_complicated(\n  something = \"that\",\n  requires = many,\n  arguments = \"some of which may be long\"\n)\n\n# Bad\ndo_something_very_complicated(\"that\", requires, many, arguments,\n                              \"some of which may be long\"\n                              )\n\nAs described under Named arguments, you can omit the argument names for very common arguments (i.e. for arguments that are used in almost every invocation of the function). Short unnamed arguments can also go on the same line as the function name, even if the whole function call spans multiple lines.\n\nmap(x, f,\n  extra_argument_a = 10,\n  extra_argument_b = c(1, 43, 390, 210209)\n)\n\nYou may also place several arguments on the same line if they are closely related to each other, e.g., strings in calls to paste() or stop(). When building strings, where possible match one line of code to one line of output.\n\n# Good\npaste0(\n  \"Requirement: \", requires, \"\\n\",\n  \"Result: \", result, \"\\n\"\n)\n\n# Bad\npaste0(\n  \"Requirement: \", requires,\n  \"\\n\", \"Result: \",\n  result, \"\\n\")"
  },
  {
    "objectID": "syntax.html#semicolons",
    "href": "syntax.html#semicolons",
    "title": "2  Syntax",
    "section": "2.6 Semicolons",
    "text": "2.6 Semicolons\nDon’t put ; at the end of a line, and don’t use ; to put multiple commands on one line."
  },
  {
    "objectID": "syntax.html#assignment-1",
    "href": "syntax.html#assignment-1",
    "title": "2  Syntax",
    "section": "2.7 Assignment",
    "text": "2.7 Assignment\nUse <-, not =, for assignment.\n\n# Good\nx <- 5\n\n# Bad\nx = 5"
  },
  {
    "objectID": "syntax.html#data",
    "href": "syntax.html#data",
    "title": "2  Syntax",
    "section": "2.8 Data",
    "text": "2.8 Data\n\n2.8.1 Character vectors\nUse \", not ', for quoting text. The only exception is when the text already contains double quotes and no single quotes.\n\n# Good\n\"Text\"\n'Text with \"quotes\"'\n'<a href=\"http://style.tidyverse.org\">A link</a>'\n\n# Bad\n'Text'\n'Text with \"double\" and \\'single\\' quotes'\n\n\n\n2.8.2 Logical vectors\nPrefer TRUE and FALSE over T and F."
  },
  {
    "objectID": "syntax.html#comments",
    "href": "syntax.html#comments",
    "title": "2  Syntax",
    "section": "2.9 Comments",
    "text": "2.9 Comments\nEach line of a comment should begin with the comment symbol and a single space: #\nIn data analysis code, use comments to record important findings and analysis decisions. If you need comments to explain what your code is doing, consider rewriting your code to be clearer. If you discover that you have more comments than code, consider switching to R Markdown."
  },
  {
    "objectID": "files.html#namen",
    "href": "files.html#namen",
    "title": "1  Dateien",
    "section": "1.1 Namen",
    "text": "1.1 Namen\nFile names should be meaningful and end in .R. Avoid using special characters in file names - stick with numbers, letters, -, and _.\n# Good\nfit_models.R\nutility_functions.R\n\n# Bad\nfit models.R\nfoo.r\nstuff.r\nIf files should be run in a particular order, prefix them with numbers. If it seems likely you’ll have more than 10 files, left pad with zero:\n00_download.R\n01_explore.R\n...\n09_model.R\n10_visualize.R\nIf you later realise that you’ve missed some steps, it’s tempting to use 02a, 02b, etc. However, I think it’s generally better to bite the bullet and rename all files.\nPay attention to capitalization, since you, or some of your collaborators, might be using an operating system with a case-insensitive file system (e.g., Microsoft Windows or OS X) which can lead to problems with (case-sensitive) revision control systems. Prefer file names that are all lower case, and never have names that differ only in their capitalization."
  }
]